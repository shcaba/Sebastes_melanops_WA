fit_model[6]
fit_model[7]
fit_model[8]
fit_model[9]
fit_model[10]
fit_model[11]
fit_model[12]
fit_model[13]
fit_model[14]
fit_model[15]
fit_model[16]
fit_model[17]
shiny::runApp('Github/SS-DL-tool')
?verbatimTextOutput
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
summary(fit_model)
class(fit_model)
summary(fit_model)
class(summary(fit_model))
attributs(summary(fit_model))
attributes(summary(fit_model))
as.character(summary(fit_model))
class(as.character(summary(fit_model)))
paste0("Diagnostics",(as.character(summary(fit_model))))
save(summary(fit_model),paste0(p,"/fit_model_sum.RData"))
getwd()
save(summary(fit_model),"test.Rdata")
print(summary(fit_model))
paste0(""BB,print(summary(fit_model)))
paste0("BB",print(summary(fit_model)))
xx<-paste0("BB",print(summary(fit_model)))
xx
levels(fit_model)
fit_model
summary(fit_model)
paste0("BB",fit_model)
fit_model
fit_model[1]
fit_model[[1]]
xx<-list(summary(fit_model))
xx
xx[[1]]
?sink
file.summary.out<-file(paste0(p,"/file.summary.out.log"))
ile.summary.out
file.summary.out
summary(fit_model)
sink(file.summary.out,append=TRUE)
summary(fit_model)
cat(readLines("file.summary.out"), sep="\n")
file.summary.out
sink()
file.summary.out<-file(paste0(p,"/file.summary.out.log"))
sink(file.summary.out,append=TRUE)
sink(file.summary.out,append=TRUE,type="message")
summary(fit_model)
sink()
sink(type="message")
cat(readLines("file.summary.out"), sep="\n")
file.summary.out<-file(paste0(p,"/file.summary.out.log"))
sink(file.summary.out,split=TRUE)
print(summary(fit_model))
file.summary.out
save(file.summary.out,paste0(p,"/file.summary.out.log"))
save(file.summary.out)
?capture.output
utils::capture.output(summary(fit_model), file=paste0(p,"/file.summary.out.log"))
paste0(p,"/file.summary.out.log")
xx<-read(paste0(p,"/file.summary.out.log"))
?read
?read.txt
?read.text
?load
xx<-read.delim(paste0(p,"/file.summary.out.log"))
xx
?read.delim
?capture.output
clse()
cl0se()
close()
dev.off*()
dev.off()
utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary<-utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary
print(fit.mod.summary)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?dir.create
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
dir.exists("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1_RWM")
dir.exists("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1_RWM")
shiny::runApp('Github/SS-DL-tool')
dir.exists(file.path(modeff.dir,modeff.name)
)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
print(fit.mod.summary.out)
fit.mod.summary
utils::capture.output(summary(fit_model), file=NULL)
utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary
fit.mod.summary[1]
print(fit.mod.summary)
print(fit.mod.summary)
shiny::runApp('Github/SS-DL-tool')
paste0(fit.mod.summary[1],fit.mod.summary[2],fit.mod.summary[3])
?launch_shinyadmb
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?try
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
debug(SSexecutivesummary)
Get.Values(replist = replist, label = sb.name,
years, ci_value)
Q
SSexecutivesummary
edit(SSexecutivesummary)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('TestDeployment')
runApp('Github/Natural-Mortality-Tool')
?adnuts
?sample_nuts
library(adnuts)
?sample_nuts
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
library(pak)
pak::pkg_install("pfmc-assessments/sa4ss")
#detach("package:sa4ss", unload = TRUE)
#remotes::install_github("nwfsc-assess/sa4ss")
#devtools::load_all("C:/Users/Chantel.Wetzel/Documents/GitHub/r4ss")
library(sa4ss)
library(r4ss)
# Specify the directory for the document
setwd("C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document")
base_name = "Reference model"
mod_loc = file.path(
"C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/models",
base_name)
sa4ss::read_model(
mod_loc = mod_loc,
create_plots = FALSE,
html = FALSE,
save_loc = file.path(getwd(), "tex_tables"),
)
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
base_name = "Reference model"
mod_loc = file.path(
"C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/models",
base_name)
sa4ss::read_model(
mod_loc = mod_loc,
create_plots = FALSE,
html = FALSE,
save_loc = file.path(getwd(), "tex_tables"),
)
getwd()
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
out<-read.csv("C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tables/Recreational dockside data sample size table.csv")
t = table_format(x = out,
caption = 'WDFW recreational dockside data sample size reductions at each data filtering step',
label = 'dockside_samples',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Filter","Criteria","Samples"))
out<-read.csv("C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tables/Recreational dockside data sample size table.csv")
t = table_format(x = out,
caption = 'WDFW recreational dockside data sample size reductions at each data filtering step',
label = 'dockside_samples',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Filter","Criteria","Samples"))
kableExtra::save_kable(t,
file = file.path("C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tex_tables/dockside_samples.tex"))
out<-read.csv("C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tables/Hurdle models selection for nearshore survey.csv")
t = table_format(x = out,
caption = 'Hurdle negative binomial models and the resultant model selection values for the nearshore survey CPUE data set. Gray bar indicates chosen model',
label = 'nearshore_hurdle_modsel',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Model","WAIC","SE"))
out
out<-read.csv("C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tables/Hurdle models selection for nearshore survey.csv")
out
t = table_format(x = out,
caption = 'Hurdle negative binomial models and the resultant model selection values for the nearshore survey CPUE data set. Gray bar indicates chosen model',
label = 'nearshore_hurdle_modsel',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Model","WAIC","SE"))
kableExtra::save_kable(t,
file = file.path("C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tex_tables/nearshore_hurdle_modsel.tex"))
out<-read.csv("C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tables/Major changes in WA tagging program.csv")
out
out<-read.csv("C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tables/Major changes in WA tagging program.csv")
t = table_format(x = out,
caption = 'Major changes in the Washington tagging program since 1981',
label = 'tag_changes',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Time Period","Primary Objectives","Tagging Method","Recovery Method"))
kableExtra::save_kable(t,
file = file.path("C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tex_tables/tag_changes.tex"))
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
base_name = "Reference model"
mod_loc = file.path(
"C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/models",
base_name)
sa4ss::read_model(
mod_loc = mod_loc,
create_plots = FALSE,
html = FALSE,
save_loc = file.path(getwd(), "tex_tables"),
)
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
Dir.tables<-"C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tables/"
Dir.tables.tex<-"C:/Users/Jason.Cope/Documents/Github/Sebastes_melanops_WA/Document/tex_tables/"
out<-read.csv(paste0(Dir.tables,"WA_Comm_lts_year_fleet_sex.csv"))
t = table_format(x = out,
caption = 'Sampled commercial lengths by year, fleet and sex',
label = 'WA_Comm_Lt_samps',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("","","","","","","","","",""))
kableExtra::save_kable(t,
file = file.path(paste0(Dir.tables.tex,"WA_Comm_Lt_samps.tex")))
out<-read.csv(paste0(Dir.tables,"WA_Comm_ages_year_fleet_sex.csv"))
t = table_format(x = out,
caption = 'Sampled commercial ages by year, fleet and sex',
label = 'WA_Comm_Age_samps',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("","","","","","","","","",""))
kableExtra::save_kable(t,
file = file.path(paste0(Dir.tables.tex,"WA_Comm_Age_samps.tex")))
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
out<-read.csv(paste0(Dir.tables,"WA_Comm_ages_year_fleet_sex.csv"))
t = table_format(x = out,
caption = 'Sampled commercial ages by year, fleet and sex',
label = 'WA_Comm_Age_samps',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("","","","","","","","",""))
kableExtra::save_kable(t,
file = file.path(paste0(Dir.tables.tex,"WA_Comm_Age_samps.tex")))
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
getws()
getwd()
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
sa4ss::es_table_tex(dir = mod_loc,
save_loc = file.path(getwd(), "tex_tables"),
csv_name = "table_labels.csv")
mod_loc
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
